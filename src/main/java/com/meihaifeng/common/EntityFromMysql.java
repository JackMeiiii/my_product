package com.meihaifeng.common;import org.apache.commons.httpclient.util.DateUtil;import java.io.File;import java.io.FileWriter;import java.io.IOException;import java.io.PrintWriter;import java.sql.*;import java.util.Date;/** * * @author meihf * @date 2016/11/16 * @description */public class EntityFromMysql {        private static String modulePath = "/yyyy-druggist-service/src/main/java/";        private static String packageOutPath = "com.xm.xmap1702043.druggist.model";//指定实体生成所在包的路径        private static String dtoPackageOutPath = "com.xm.xmap1702043.druggist.dto";//指定实体生成所在包的路径        private static String mapperPPackageOutPath = "com.xm.xmap1702043.druggist.mapper";//指定实体生成所在包的路径        private static String servicePackageOutPath = "com.xm.xmap1702043.druggist.service";//指定实体生成所在包的路径        private static String serviceImplPackageOutPath = "com.xm.xmap1702043.druggist.service.impl";//指定实体生成所在包的路径        private static String tablename = "hotSearch";//表名        private static String authorName = "meihf";//作者名字        private static String[] colnames; // 列名数组        private static String[] colTypes; //列名类型数组        private static String[] commentnames;//列名称注释        private static int[] colSizes; //列名大小数组        private static boolean f_util = false; // 是否需要导入包java.util.*        private static boolean f_sql = false; // 是否需要导入包java.sql.*        private static boolean mybatis = true;//是否导入mybatis注解        //数据库连接        private static final String URL ="jdbc:mysql://121.40.99.146:3306/xmap1702043_dev?useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&transformedBitIsBoolean=true&useSSL=false&allowMultiQueries=true";        private static final String NAME = "root";        private static final String PASS = "Java@1234";        private static final String DRIVER ="com.mysql.jdbc.Driver";        /*         * 构造函数         */        public EntityFromMysql(String tablename, String authorName){            this.tablename = tablename;            this.authorName = authorName;            //创建连接            Connection con;            //查要生成实体类的表            String sql = "select * from " + tablename;            PreparedStatement pStemt = null;            try {                try {                    Class.forName(DRIVER);                } catch (ClassNotFoundException e1) {                    // TODO Auto-generated catch block                    e1.printStackTrace();                }                con = DriverManager.getConnection(URL,NAME,PASS);                pStemt = con.prepareStatement(sql);                ResultSetMetaData rsmd = pStemt.getMetaData();                int size = rsmd.getColumnCount();	//统计列                colnames = new String[size];                colTypes = new String[size];                colSizes = new int[size];                commentnames = new String[size];                //获取注释名称                Statement stmt = con.createStatement();                ResultSet resultSet = stmt.executeQuery("show full columns from "+tablename);                for (int i = 0; i < size; i++) {                    //主键加上TabelId注释                    if (rsmd.isAutoIncrement(i+1)){                        colnames[i] = rsmd.getColumnName(i+1)+"KeyId";                    }else {                        colnames[i] = rsmd.getColumnName(i + 1);                    }                    colTypes[i] = rsmd.getColumnTypeName(i + 1);                    if (resultSet!=null && resultSet.next()){                        commentnames[i] = resultSet.getString("Comment");                    }                    if(colTypes[i].equalsIgnoreCase("datetime")){                        f_util = false;                    }                    if(colTypes[i].equalsIgnoreCase("image") ){                        f_sql = true;                    }                    colSizes[i] = rsmd.getColumnDisplaySize(i + 1);                }                String content = parse(colnames,colTypes,colSizes);                try {                    File directory = new File("");                    String path=this.getClass().getResource("").getPath();                    System.out.println(path);                    String outputPath = directory.getAbsolutePath()+ this.modulePath+this.packageOutPath.replace(".", "/")+"/"+initcap(tablename) + ".java";                    FileWriter fw = new FileWriter(outputPath);                    PrintWriter pw = new PrintWriter(fw);                    pw.println(content);                    pw.flush();                    pw.close();                    //先生成dto                    String contentDto = parseDto(colnames,colTypes,colSizes);                    String outputPathDto = directory.getAbsolutePath()+ this.modulePath+this.dtoPackageOutPath.replace(".", "/")+"/"+initcap(tablename) +"Dto"+ ".java";                    FileWriter fwDto = new FileWriter(outputPathDto);                    PrintWriter pwDto = new PrintWriter(fwDto);                    pwDto.println(contentDto);                    pwDto.flush();                    pwDto.close();                    //再生成mapper                    String contentMapper = parseMapper();                    String outputPathMapper = directory.getAbsolutePath()+ this.modulePath+this.mapperPPackageOutPath.replace(".", "/")+"/"+initcap(tablename) +"Mapper"+ ".java";                    FileWriter fwMapper = new FileWriter(outputPathMapper);                    PrintWriter pwMapper = new PrintWriter(fwMapper);                    pwMapper.println(contentMapper);                    pwMapper.flush();                    pwMapper.close();                    //再生成service                    String contentService = parseService();                    String outputPathService = directory.getAbsolutePath()+ this.modulePath+this.servicePackageOutPath.replace(".", "/")+"/"+initcap(tablename) +"Service"+ ".java";                    FileWriter fwService = new FileWriter(outputPathService);                    PrintWriter pwService = new PrintWriter(fwService);                    pwService.println(contentService);                    pwService.flush();                    pwService.close();                    //再生成serviceimpl                    String contentServiceImpl = parseServiceImpl();                    String outputPathServiceImpl = directory.getAbsolutePath()+ this.modulePath+this.serviceImplPackageOutPath.replace(".", "/")+"/"+initcap(tablename) +"ServiceImpl"+ ".java";                    FileWriter fwServiceImpl = new FileWriter(outputPathServiceImpl);                    PrintWriter pwServiceImpl = new PrintWriter(fwServiceImpl);                    pwServiceImpl.println(contentServiceImpl);                    pwServiceImpl.flush();                    pwServiceImpl.close();                } catch (IOException e) {                    e.printStackTrace();                }            } catch (SQLException e) {                e.printStackTrace();            } finally{            }        }        /**         * 功能：生成实体类主体代码         * @return         */        private String parse(String[] colnames, String[] colTypes, int[] colSizes) {            StringBuffer sb = new StringBuffer();            sb.append("package " + this.packageOutPath + ";\r\n");            sb.append("import java.io.Serializable;\r\n");            //判断是否导入工具包            if(f_util){                sb.append("import java.util.Date;\r\n");            }            if(f_sql){                sb.append("import java.sql.*;\r\n");            }if (mybatis){                sb.append("import com.baomidou.mybatisplus.annotations.IdType;\r\n" +                        "import com.baomidou.mybatisplus.annotations.TableField;\r\n" +                        "import com.baomidou.mybatisplus.annotations.TableId;\r\n" +                        "import com.baomidou.mybatisplus.annotations.TableName;\r\n");            }            sb.append("import lombok.Data;\r\n");            sb.append("\r\n");            //注释部分            sb.append("/**\r\n");            sb.append(" * 杭州新苗网络科技有限公司\r\n");            sb.append(" * @author "+authorName+"\r\n");            sb.append(" * @date "+ DateUtil.formatDate(new Date(),"yyyy/MM/dd")+"\r\n");            sb.append(" * @description\r\n");            sb.append("*/ \r\n");            sb.append("@TableName(value =");            sb.append("\""+tablename+"\")\r\n");            sb.append("@Data\r\n");            //实体部分            sb.append("public class " + initcap(tablename) + " implements Serializable {\r\n");            processAllAttrs(sb,mybatis);//属性            sb.append("}\r\n");            return sb.toString();        }        /**        *        * @param colnames        * @param colTypes        * @param colSizes        * @return 创建dto类        */        private String parseDto(String[] colnames, String[] colTypes, int[] colSizes){            mybatis = false;            StringBuffer sb = new StringBuffer();            sb.append("package " + this.dtoPackageOutPath + ";\r\n");            sb.append("import java.io.Serializable;\r\n");            //判断是否导入工具包            if(f_util){                sb.append("import java.util.Date;\r\n");            }            if(f_sql){                sb.append("import java.sql.*;\r\n");            }if (mybatis){                sb.append("import com.baomidou.mybatisplus.annotations.IdType;\r\n" +                        "import com.baomidou.mybatisplus.annotations.TableField;\r\n" +                        "import com.baomidou.mybatisplus.annotations.TableId;\r\n" +                        "import com.baomidou.mybatisplus.annotations.TableName;\r\n");            }            sb.append("import lombok.Data;\r\n");            sb.append("\r\n");            //注释部分            sb.append("/**\r\n");            sb.append(" * 杭州新苗网络科技有限公司\r\n");            sb.append(" * @author "+authorName+"\r\n");            sb.append(" * @date "+ DateUtil.formatDate(new Date(),"yyyy/MM/dd")+"\r\n");            sb.append(" * @description\r\n");            sb.append("*/ \r\n");            sb.append("@Data\r\n");            //实体部分            sb.append("public class " + initcap(tablename) +"Dto"+ " implements Serializable {\r\n");            processAllAttrs(sb,mybatis);//属性            sb.append("}\r\n");            return sb.toString();        }        private String parseMapper(){            mybatis = false;            StringBuffer sb = new StringBuffer();            sb.append("package " + this.mapperPPackageOutPath + ";\r\n");            sb.append("import com.baomidou.mybatisplus.mapper.AutoMapper;\r\n");            sb.append("import com.xm.xmap1702043.druggist.model."+initcap(tablename)+";\r\n");            sb.append("\r\n");            //注释部分            sb.append("/**\r\n");            sb.append(" * 杭州新苗网络科技有限公司\r\n");            sb.append(" * @author "+authorName+"\r\n");            sb.append(" * @date "+ DateUtil.formatDate(new Date(),"yyyy/MM/dd")+"\r\n");            sb.append(" * @description\r\n");            sb.append("*/ \r\n");            //实体部分            sb.append("public interface " + initcap(tablename) +"Mapper"+ " extends AutoMapper<"+initcap(tablename)+"> {\r\n");            sb.append("}\r\n");            return sb.toString();        }    /**     * 生成service     */    public String parseService(){        mybatis = false;        StringBuffer sb = new StringBuffer();        sb.append("package " + this.servicePackageOutPath + ";\r\n");        sb.append("import com.baomidou.framework.service.ISuperService;\r\n");        sb.append("import com.xm.xmap1702043.druggist.model."+initcap(tablename)+";\r\n");        sb.append("\r\n");        //注释部分        sb.append("/**\r\n");        sb.append(" * 杭州新苗网络科技有限公司\r\n");        sb.append(" * @author "+authorName+"\r\n");        sb.append(" * @date "+ DateUtil.formatDate(new Date(),"yyyy/MM/dd")+"\r\n");        sb.append(" * @description\r\n");        sb.append("*/ \r\n");        //实体部分        sb.append("public interface " + initcap(tablename) +"Service"+ " extends ISuperService<"+initcap(tablename)+"> {\r\n");        sb.append("}\r\n");        return sb.toString();    }    /**     * 生成实现类     */    public String parseServiceImpl(){        mybatis = false;        StringBuffer sb = new StringBuffer();        sb.append("package " + this.serviceImplPackageOutPath + ";\r\n");        sb.append("import com.baomidou.framework.service.impl.SuperServiceImpl;\r\n");        sb.append("import com.xm.xmap1702043.druggist.mapper."+initcap(tablename)+"Mapper"+";\r\n");        sb.append("import com.xm.xmap1702043.druggist.model."+initcap(tablename)+";\r\n");        sb.append("import com.xm.xmap1702043.druggist.service."+initcap(tablename)+"Service"+";\r\n");        sb.append("import org.springframework.stereotype.Service;\r\n");        sb.append("\r\n");        //注释部分        sb.append("/**\r\n");        sb.append(" * 杭州新苗网络科技有限公司\r\n");        sb.append(" * @author "+authorName+"\r\n");        sb.append(" * @date "+ DateUtil.formatDate(new Date(),"yyyy/MM/dd")+"\r\n");        sb.append(" * @description\r\n");        sb.append("*/ \r\n");        sb.append("@Service(");        sb.append("\""+Character.toLowerCase(initcap(tablename).charAt(0))+initcap(tablename).substring(1)+"Service"+"\")\r\n");        //实体部分        sb.append("public class " + initcap(tablename)+"ServiceImpl extends SuperServiceImpl<"+initcap(tablename)+"Mapper"+","+initcap(tablename)+"> implements "+initcap(tablename)+"Service {\r\n");        sb.append("}\r\n");        return sb.toString();    }    /**     * 功能：生成所有属性         */        private void processAllAttrs(StringBuffer sb,boolean mybatis) {            if (mybatis){                sb.append("\r\t@TableField(exist = false)\n" +                        "    private static final long serialVersionUID = 1L;\r\n");            }            for (int i = 0; i < colnames.length; i++) {                if (!(colnames[i].equals("datafrom")                        ||colnames[i].equals("sort")                        ||colnames[i].equals("modifier")                        ||colnames[i].equals("creator")                        ||colnames[i].equals("synch_status")                        ||colnames[i].equals("modified_time")                        ||colnames[i].equals("is_deleted"))){                    sb.append("\t/**"+commentnames[i]+"**/\r\n");                    if (colnames[i].contains("KeyId")){                        if (mybatis){                            sb.append("\t@TableId(type = IdType.AUTO)\r\n");                        }                        sb.append("\tprivate " + sqlType2JavaType(colTypes[i]) + " " + colnames[i].substring(0,colnames[i].length()-5) + ";\r\n");                    }else {                        sb.append("\tprivate " + sqlType2JavaType(colTypes[i]) + " " + colnames[i] + ";\r\n");                    }                }            }        }        /**         * 功能：生成所有方法         */        private void processAllMethod(StringBuffer sb) {            for (int i = 0; i < colnames.length; i++) {                if (!(colnames[i].equals("datafrom")                        ||colnames[i].equals("sort")                        ||colnames[i].equals("modifier")                        ||colnames[i].equals("creator")                        ||colnames[i].equals("synch_status")                        ||colnames[i].equals("modified_time")                        ||colnames[i].equals("is_deleted"))){                    sb.append("\tpublic void set" + initcapGetAndSet(colnames[i]) + "(" + sqlType2JavaType(colTypes[i]) + " " +                            colnames[i] + "){\r\n");                    sb.append("\t\tthis." + colnames[i] + "=" + colnames[i] + ";\r\n");                    sb.append("\t}\r\n\r\n");                    sb.append("\tpublic " + sqlType2JavaType(colTypes[i]) + " get" + initcapGetAndSet(colnames[i]) + "(){\r\n");                    sb.append("\t\treturn " + colnames[i] + ";\r\n");                    sb.append("\t}\r\n\r\n");                }            }        }    private String initcapGetAndSet(String colname) {        char[] ch = colname.toCharArray();        if(ch[0] >= 'a' && ch[0] <= 'z'){            ch[0] = (char)(ch[0] - 32);        }        return new String(ch);    }    /**     * 功能：将输入字符串的首字母改成大写     * @return     */        private String initcap(String str) {            char[] ch = str.toCharArray();            if(ch[0] >= 'a' && ch[0] <= 'z'){                ch[0] = (char)(ch[0] - 32);            String str2 = initcap(new String(ch));            return str2;            }            else if (str.contains("_")){                int index = str.indexOf("_");                if(ch[index+1] >= 'a' && ch[index+1] <= 'z'){                    ch[index+1] = (char)(ch[index+1] - 32);                }                String str2 = new String(ch).substring(0,index+1).replace("_","")+new String(ch).substring(index+1);                String str3 = initcap(str2);                return str3;            }            return new String(ch);        }        /**         * 功能：获得列的数据类型         * @return         */        private String sqlType2JavaType(String sqlType) {            if(sqlType.equalsIgnoreCase("bit")){                return "Boolean";            }else if(sqlType.equalsIgnoreCase("smallint")){                return "Short";            }else if(sqlType.equalsIgnoreCase("int")                    || sqlType.equalsIgnoreCase("INT UNSIGNED")                    || sqlType.equalsIgnoreCase("tinyint")){                return "Integer";            }else if(sqlType.equalsIgnoreCase("bigint")                    || sqlType.equalsIgnoreCase("BIGINT UNSIGNED")){                return "Long";            }else if(sqlType.equalsIgnoreCase("float")){                return "Float";            }else if(sqlType.equalsIgnoreCase("decimal") || sqlType.equalsIgnoreCase("numeric")                    || sqlType.equalsIgnoreCase("real") || sqlType.equalsIgnoreCase("money")                    || sqlType.equalsIgnoreCase("smallmoney")                    || sqlType.equalsIgnoreCase("DOUBLE")                    || sqlType.equalsIgnoreCase("double")){                return "Double";            }else if(sqlType.equalsIgnoreCase("varchar") || sqlType.equalsIgnoreCase("char")                    || sqlType.equalsIgnoreCase("nvarchar") || sqlType.equalsIgnoreCase("nchar")                    || sqlType.equalsIgnoreCase("text")){                return "String";            }else if(sqlType.equalsIgnoreCase("datetime")){                return "Timestamp";            }else if(sqlType.equalsIgnoreCase("image")){                return "Blod";            }else if(sqlType.equalsIgnoreCase("json")){                return "String";            }            return null;        }        /**         * 出口         * TODO         */        public static void main(String[] args) {            new EntityFromMysql(tablename,authorName);        }    }