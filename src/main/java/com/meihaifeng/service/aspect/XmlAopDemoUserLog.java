package com.meihaifeng.service.aspect;import org.aspectj.lang.ProceedingJoinPoint;import org.aspectj.lang.annotation.After;import org.aspectj.lang.annotation.AfterReturning;import org.aspectj.lang.annotation.AfterThrowing;import org.aspectj.lang.annotation.Before;/** * 浙江卓锐科技股份有限公司 * * @author meihf * @date 2016/11/10 * @description */public class XmlAopDemoUserLog {    //    方法执行前通知    public void beforeLog() {        System.out.println("开始执行前置通知  日志记录");    }    //    方法执行完后通知    public void afterLog() {        System.out.println("开始执行后置通知 日志记录");    }    //    执行成功后通知    public void afterReturningLog() {        System.out.println("方法成功执行后通知 日志记录");    }    //    方法执行前通知    @Before("execution(com.alibaba.fastjson.JSONObject com.meihaifeng.service.aspect.UserServiceImpl.getUserLog2(..))")    public void beforeLog2() {        System.out.println("2开始执行前置通知  日志记录");    }    //    方法执行完后通知    @After("execution(com.alibaba.fastjson.JSONObject com.meihaifeng.service.aspect.UserServiceImpl.getUserLog2(..))")    public void afterLog2() {        System.out.println("2开始执行后置通知 日志记录");    }    //    执行成功后通知    @AfterReturning("execution(com.alibaba.fastjson.JSONObject com.meihaifeng.service.aspect.UserServiceImpl.getUserLog2(..))")    public void afterReturningLog2() {        System.out.println("2方法成功执行后通知 日志记录");    }    //    方法执行前通知    @Before("execution(com.meihaifeng.service.aspect.UserServiceImpl.getUserLog3(com.meihaifeng.entity.User))")    public void beforeLog3() {        System.out.println("3开始执行前置通知  日志记录");    }    //    方法执行完后通知    @After("com.meihaifeng.service.aspect.UserServiceImpl.getUserLog3(com.meihaifeng.entity.User))")    public void afterLog3() {        System.out.println("3开始执行后置通知 日志记录");    }    //    执行成功后通知    @AfterReturning("com.meihaifeng.service.aspect.UserServiceImpl.getUserLog3(com.meihaifeng.entity.User))")    public void afterReturningLog3() {        System.out.println("3方法成功执行后通知 日志记录");    }    //    抛出异常后通知    @AfterThrowing("com.meihaifeng.service.aspect.UserServiceImpl.getUserLog(com.meihaifeng.entity.User)")    public void afterThrowingLog() {        System.out.println("方法抛出异常后执行通知 日志记录");    }    //    环绕通知    public Object aroundLog(ProceedingJoinPoint joinpoint) {        Object result = null;        try {            System.out.println("环绕通知开始 日志记录");            long start = System.currentTimeMillis();            //有返回参数 则需返回值            result =  joinpoint.proceed();            long end = System.currentTimeMillis();            System.out.println("总共执行时长" + (end - start) + " 毫秒");            System.out.println("环绕通知结束 日志记录");        } catch (Throwable t) {            System.out.println("出现错误");        }        return result;    }}