package com.meihaifeng.web;import com.alibaba.fastjson.JSONObject;import com.meihaifeng.annotation.CacheKey;import com.meihaifeng.annotation.Cacheable;import com.meihaifeng.entity.RestMessage;import com.meihaifeng.entity.User;import com.meihaifeng.service.impl.UserServiceImpl;import org.apache.commons.logging.Log;import org.apache.commons.logging.LogFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.*;import java.util.Map;/** * 浙江卓锐科技股份有限公司 * * @author meihf * @date 2016/11/10 * @description */@Controller@RequestMapping("aop")public class AopController {    private static final Log LOG = LogFactory.getLog("AopController.class");    @Autowired    UserServiceImpl userService;    @RequestMapping("/getUserLog")    @ResponseBody    public Map<String,Object> getUserLog(){        Map<String,Object> map = userService.getUserLog(1);        return map;    }    @RequestMapping("/getUserLog2")    @ResponseBody    public RestMessage getUserLog2() {        RestMessage restMessage = userService.getUserLog2();        return restMessage;    }    @RequestMapping("/getUserLog3")    @ResponseBody    public User getUserLog3(){        User user = userService.getUserLog3();        return user;    }    @RequestMapping("getUserLog4")    @ResponseBody    public User getUserLog4(){        User info = userService.getUserLog4();        return info;    }    @RequestMapping("getUserLog5")    @ResponseBody    public User getUserLog5(){        User user = userService.getUserLog5();        return user;    }    @Cacheable(expire = 600,keyMode = Cacheable.KeyMode.BASIC)    @RequestMapping("getUserLog6")    @ResponseBody    public User getUserLog6(@CacheKey @RequestBody JSONObject id_json){        String id = id_json.getString("id");        User user = userService.getUserLog6(id);        return user;    }    /**     * 这个事在启动spring的时候就加载的缓存     */    @RequestMapping("getRedisCache")    @ResponseBody    public Map<Integer,User> getRedisCache(){        Map<Integer,User> userMap = userService.getRedisCache();        return userMap;    }    /**     * 删除根据id删除     */    @RequestMapping(value = "delete/{id}",method = RequestMethod.DELETE)    @ResponseBody    public void delete(@PathVariable("id") String  id){        userService.delteUser(id);    }}